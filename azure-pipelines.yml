
trigger:
- '*'

variables:
  buildConfiguration: 'Release'
  dotnetSdkVersion: '8.x'

stages:
- stage: 'Build'
  displayName: 'Build the web application'
  jobs: 
  - job: 'Build'
    displayName: 'Build job'
    pool:
      vmImage: 'ubuntu-22.04'
      demands:
      - npm

    variables:
      wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
      dotnetSdkVersion: '8.x'

    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET SDK $(dotnetSdkVersion)'
      inputs:
        version: '$(dotnetSdkVersion)'

    - task: Npm@1
      displayName: 'Run npm install'
      inputs:
        verbose: false

    - script: './node_modules/.bin/sass Tailspin.SpaceGame.Web/wwwroot:Tailspin.SpaceGame.Web/wwwroot'
      displayName: 'Compile Sass assets'

    - task: gulp@1
      displayName: 'Run gulp tasks'

    - script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
      displayName: 'Write build info'
      workingDirectory: $(wwwrootDir)

    - task: DotNetCoreCLI@2
      displayName: 'Restore project dependencies'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build the project - $(buildConfiguration)'
      inputs:
        command: 'build'
        arguments: '--no-restore --configuration $(buildConfiguration)'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Publish the project - $(buildConfiguration)'
      inputs:
        command: 'publish'
        projects: '$(System.DefaultWorkingDirectory)/**/Tailspin.SpaceGame.Web.csproj' 
        publishWebProjects: false
        arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
        zipAfterPublish: true

    - publish: '$(Build.ArtifactStagingDirectory)'
      artifact: drop

- stage: 'Dev'
  displayName: 'Deploy to the dev environment'
  dependsOn: Build
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'ubuntu-22.04'
    environment: dev
    variables:
    - group: Release
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - task: PowerShell@2
            displayName: 'Deploy to Azure App Service (Dev)'
            inputs:
              targetType: 'inline'
              script: |
                # Install Azure CLI if not present
                if (-not (Get-Command az -ErrorAction SilentlyContinue)) {
                  Invoke-WebRequest -Uri https://aka.ms/installazurecliwindows -OutFile .\AzureCLI.msi
                  Start-Process msiexec.exe -Wait -ArgumentList '/I AzureCLI.msi /quiet'
                }
                az login --service-principal -u $(azureServicePrincipalUsername) -p $(azureServicePrincipalPassword) --tenant $(azureTenantId)
                az webapp deployment source config-zip --resource-group $(ResourceGroupNameDev) --name $(WebAppNameDev) --src "$(Pipeline.Workspace)/drop/$(buildConfiguration)/Tailspin.SpaceGame.Web.zip"

- stage: 'Test'
  displayName: 'Deploy to test & run UI tests'
  dependsOn: Dev
  variables:
    SITE_URL: 'tailspin-space-game-tstgb-a4edaufyhgc3dbdg.canadacentral-01.azurewebsites.net'
  jobs:
    - deployment: Deploy
      pool:
        vmImage: 'ubuntu-22.04'
      environment: test
      strategy:
        runOnce:
          deploy:
            steps:
            - download: current
              artifact: drop
            - task: PowerShell@2
              displayName: 'Deploy to Azure App Service (Test)'
              inputs:
                targetType: 'inline'
                script: |
                  # Install Azure CLI if not present
                  if (-not (Get-Command az -ErrorAction SilentlyContinue)) {
                    Invoke-WebRequest -Uri https://aka.ms/installazurecliwindows -OutFile .\AzureCLI.msi
                    Start-Process msiexec.exe -Wait -ArgumentList '/I AzureCLI.msi /quiet'
                  }
                  az login --service-principal -u $(azureServicePrincipalUsername) -p $(azureServicePrincipalPassword) --tenant $(azureTenantId)
                  az webapp deployment source config-zip --resource-group $(ResourceGroupNameTest) --name $(WebAppNameTest) --src "$(Pipeline.Workspace)/drop/$(buildConfiguration)/Tailspin.SpaceGame.Web.zip"

    - job: RunUITests
      displayName: 'Run UI tests'
      pool:
        vmImage: 'windows-latest'            # or windows-2019 with choco install
      variables:
        TEST_BASE_URL: 'https://$(SITE_URL)'  # pass the site URL into your tests
      steps:
        - task: PowerShell@2
          displayName: 'Install Chrome & ChromeDriver'
          inputs:
            targetType: inline
            script: |
              choco install googlechrome -y
              choco install chromedriver -y
              $env:PATH += ";${env:ProgramData}\chocolatey\bin"
        - script: |
            Write-Host "TEST_BASE_URL = $(TEST_BASE_URL)"
          displayName: 'Echo TEST_BASE_URL'
        - task: UseDotNet@2
          displayName: 'Use .NET SDK $(dotnetSdkVersion)'
          inputs:
            version: '$(dotnetSdkVersion)'
        - task: DotNetCoreCLI@2
          displayName: 'Build UI test project'
          inputs:
            command: build
            arguments: '--configuration $(buildConfiguration)'
            projects: '$(System.DefaultWorkingDirectory)/**/*UITests.csproj'
        - task: DotNetCoreCLI@2
          displayName: 'Run UI tests'
          inputs:
            command: test
            arguments: '--no-build --configuration $(buildConfiguration)'
            publishTestResults: true
            projects: '$(System.DefaultWorkingDirectory)/**/*UITests.csproj'


- stage: 'Staging'
  displayName: 'Deploy to the staging environment'
  dependsOn: Test
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'ubuntu-22.04'
    environment: staging
    variables:
    - group: 'Release'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - task: PowerShell@2
            displayName: 'Deploy to Azure App Service (Staging)'
            inputs:
              targetType: 'inline'
              script: |
                # Install Azure CLI if not present
                if (-not (Get-Command az -ErrorAction SilentlyContinue)) {
                  Invoke-WebRequest -Uri https://aka.ms/installazurecliwindows -OutFile .\AzureCLI.msi
                  Start-Process msiexec.exe -Wait -ArgumentList '/I AzureCLI.msi /quiet'
                }
                az login --service-principal -u $(azureServicePrincipalUsername) -p $(azureServicePrincipalPassword) --tenant $(azureTenantId)
                az webapp deployment source config-zip --resource-group $(ResourceGroupNameStaging) --name $(WebAppNameStaging) --src "$(Pipeline.Workspace)/drop/$(buildConfiguration)/Tailspin.SpaceGame.Web.zip"